# 튜플 : 튜플을 생성하는 방법은 비일관적이다.
# 튜플은 문자열처럼 불변 객체이므로 기존 튜플을 변경할 수 없다. 문자열과 같이 튜플을 결합여 새 튜플을 만들 수 있다.
# 튜플을 출력할 때는 괄효를 포함하여 출력한다. 튜플을 정의할때는 괄호가 있고 없고가 아니라 뒤에 콤마가 붙어야 튜플이라 정의된다.
# 튜플을 한 번에 여러 변수를 할당할 수 있다.
# + 연산자로 문자열 결합처럼 사용이 가능하고, * 연산자로 복사가 가능하다.
# ex)
empty_tuple = ()
empty_tuple = '튜플',
empty_tuple = ('튜플','튜플2')
# 이 처럼 괄호를 넣을 수도 생략할 수도 있고 요소가 2개 이상이라면 마지막 콤마는 생략이 가능하다.

# ex)
marx_tuple = ('Groucho', 'Chico', 'Harpo')
a, b, c = marx_tuple
print(a)
print(b)
print(c)
# 이것을 튜플 언패킹이라고 부른다.

# tuple()는 다른 객체를 튜플로 만들어준다.
marx_list = ['Groucho', 'Chico', 'Harpo']
print(type(tuple(marx_list)))
print(type(list(marx_tuple)))
# 이렇게 튜플과 리스트는 서로 타입의 변환이 가능하다.

a = (7, 2)
b = (7, 2, 9)
a == b
# False
a <= b
# True
a < b
# True
# 이처럼 비고도 가능하다.

t1 = ('Fee', 'Fie', 'Foe')
t2 = ('Flop',)
print(id(t1))
t1 += t2
print(id(t1))
# t1과 t2가 가리키는 원래 튜플에 새로운 튜플을 만들고, 새로운 튜플을 t1에 할당한 것이다.

# 리스트 : 리스트는 데이터를 순차적으로 파악하는 데 유옹하다. 특히 내용의 순서가 바뀔 수 있다.
# 문자열과 튜플과 다르게 변경이 가능하다. 리스트의 현재 위치에서 새로운 요소를 추가, 삭제, 수정이 가능하다. 그리고 동일한 값이 여러 번 나올 수 있다.

# 문자열 분할로 생성하기 : split() 메소드는 문자열을 구분자 단위로 분할하여 리스트를 생성한다.
takl_like_a_pirate_day = '9/19/2019'
takl_like_a_pirate_day.split('/')
# 결과 : ['9', '19', '2019']

# 리스트를 반대로 뒤집을때 사용하는 함수는 reverse() 메소드다. reverse() 메소드는 리스트를 변경하지만 값을 반환하지는 않는다.
# append() : 리스트 끝에 추가
# insert() : (offset,"추가할 항목") offset의 위치 앞에다 항목을 추가한다. 리스트 끝을 넘는 offset은 append()처럼 끝에 추가한다.
# * 로 리스트의 항목을 복사할 수 있다.
# extend()와 + extend() 메소드도 값을 반환하지 않는다. ex) print(marxes.extend(others)를 해도 출력되지 않는다.

marxes = ['하나', '둘', '셋', '넷', '다섯']
others = ['여섯', '일곱']
marxes.extend(others) # 또는 + 나 += 를 써도 같은 기능을 한다.
print(marxes)
# 결과 : ['하나', '둘', '셋', '넷', '다섯', '여섯', '일곱']

# 리스트에 리스트.append()를 하게되면 병합하지 않고 하나의 리스트로 추가한다.
marxes = ['하나', '둘', '셋', '넷', '다섯']
others = ['여섯', '일곱']
marxes.append(others)
print(marxes)
# 결과 : ['하나', '둘', '셋', '넷', '다섯', ['여섯', '일곱']]


